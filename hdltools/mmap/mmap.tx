AXIDescription:
  (static_declarations*=StaticStatement params*=ParameterStatement statements*=MainScopeStatement)#;
StaticStatement:
  'define' var=ID value=StaticStmtValue;
ParameterStatement:
  'param' name=ID value=StaticStmtValue;
StaticStmtValue:
    StaticValue | FnCall;
FnCall:
    '$' fn=ID '(' args*=FnArgument[','] ')';
FnArgument:
    ID | INT;
MainScopeStatement:
  (SlaveRegister | SlavePort | MainScopeGenerateStatement | TemplateRegister | EnumStatement);
RegisterScopeStatement:
  SlaveRegisterField | RegisterScopeGenerateStatement;
TemplateRegister:
    /template\s+/ /register\s+/ name=ID properties*=RegisterProperty scope=RegisterScope?;
RegisterScope:
    '{' statements*=RegisterScopeStatement '}';
SlaveRegister:
  /register\s+/ name=TemplatedNameSubst ('at' address=PositiveIntegerValue )?
    properties*=RegisterProperty ('using' template=ID)? scope=RegisterScope?;
TemplatedNameSubst[noskipws]:
  fragments += TemplatedNameSubstFragment;
TemplatedNameSubstFragment:
  fragment=/[a-zA-Z0-9_]*/ templates*=TemplatedNameSubstFmt;
TemplatedNameSubstFmt:
  '{' arg=/[0-9a-zA-Z_\-\+\*\/]+/ '}';

SlaveRegisterField:
    SlaveRegisterFieldImplicit | SlaveRegisterFieldExplicit;

SlaveRegisterFieldExplicit:
    /field\s+/ source=ID
    (position=RegisterFieldPosition access=RegisterFieldPermission default=RegisterFieldDefault?
    properties*=RegisterProperty qualifiers*=RegisterFieldQualifier)#;

SlaveRegisterFieldImplicit:
    /field\s+/ source=ID position=BitField access=AccessPermission default=StaticValue?;

RegisterFieldPosition:
    'position' '=' position=BitField;
RegisterFieldPermission:
    'access' '=' access=AccessPermission;
RegisterFieldDefault:
    'default' '=' default=DefaultValue;
RegisterFieldQualifier:
    'autoclear';
DefaultValue:
    StaticValue | TemplatedNameSubst;

EnumStatement:
    /enum\s+/ enum_type=ID '{' enum_fields+=EnumField[','] '}';

EnumField:
    name=ID '=' value=PositiveIntegerValue;

SlavePort:
  SlaveOutput | SlaveInput;
SlaveOutput:
  trigger?=/trigger\s+/ /output\s+/ desc=OutputDescriptor;
SlaveInput:
  /input\s+/ desc=InputDescriptor;
OutputDescriptor:
  name=TemplatedNameSubst sig=SignalSource;
InputDescriptor:
  name=TemplatedNameSubst sig=SignalDestination;
SignalSource:
  'source' '=' dest=SourceDestField;
SignalDestination:
  'dest' '=' dest=SourceDestField;
SourceBitAccessor:
    register=TemplatedNameSubst '.' bit=ID;
SourceDestField:
  SourceBitAccessor | TemplatedNameSubst | ID;
FieldBitAccessor:
    register=ID '.' bit=ID;
MainScopeGenerateStatement:
    'for' var=ID 'in' range=Range 'generate' '{' gen_scope+=MainScopeStatement '}';
RegisterScopeGenerateStatement:
    'for' var=ID 'in' range=Range 'generate' '{' gen_scope+=RegisterScopeStatement '}';
Range:
    '<' left=StaticValue ',' right=StaticValue '>';
RegisterProperty:
    StrProperty | IntProperty;
IntProperty:
    name=ID '=' value=PositiveIntegerValue;
StrProperty:
    name=ID '=' '"' value=/[^"]+/ '"';
StaticValue:
  ID | PositiveIntegerValue;
PositiveIntegerValue:
  hex=Hex | posint=PositiveInteger | bin=Binary;
BitField:
  left=BitFieldValue ('..' right=BitFieldValue)?;
BitFieldValue:
    PositiveInteger | TemplatedNameSubst;
Hex:
  '0x' /[0-9a-fA-F]+/;
Binary:
  '0b' /[01]+/;
PositiveInteger:
  /[0-9]+/;
AccessPermission:
  'RW' | 'R' | 'W' ;
Comment:
  /\/\/.*$/;
